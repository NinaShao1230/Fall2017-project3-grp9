coord_flip() +
facet_wrap(~Location, nrow =2) +
theme_grey(14)
ggplot(mspatients, aes(forcats::fct_rev(Rating),
Freq,group = factor(Rating))) +
geom_col() +
coord_flip() +
facet_wrap(~Location, nrow =2) +
theme_grey(14)
library(vcd)  # MSPatients
df <- data.frame(as.table(MSPatients)) %>%
dplyr::select(`New Orleans` = New.Orleans.Neurologist,
Freq)
ggplot(df, aes(`New Orleans`, Freq)) + geom_col() +
ggtitle("Neurologist Ratings") +
theme_grey(14)
ggplot(df, aes(`New Orleans`, Freq)) + geom_col(stat="identity") +
ggtitle("Neurologist Ratings") +
theme_grey(14)
ggplot(df, aes(`New Orleans`, Freq)) + geom_col(stat="stacked") +
ggtitle("Neurologist Ratings") +
theme_grey(14)
ggplot(df, aes(`New Orleans`, Freq)) + geom_col(stat="dodged") +
ggtitle("Neurologist Ratings") +
theme_grey(14)
ggplot(df, aes(`New Orleans`, Freq)) + geom_col(stat="dodge") +
ggtitle("Neurologist Ratings") +
theme_grey(14)
View(df)
mspatients <-data.frame(as.table(MSPatients)) %>%
dplyr::select(-Patients) %>%
rownames_to_column("ID") %>%
gather(Location, Rating, -ID, -Freq) %>%
mutate(Location = recode_factor(Location,
New.Orleans.Neurologist = "New Orleans",
Winnipeg.Neurologist = "Winnipeq")) %>%
mutate(Rating = forcats::fct_relevel(factor(Rating),
"Certain", "Probable", "Possible", "Doubtful"))
ggplot(mspatients, aes(forcats::fct_rev(Rating),
Freq, fill = Rating)) +
geom_col() +
coord_flip() +
facet_wrap(~Location, nrow =2) +
theme_grey(14)
tidydf <- GSOEP9402 %>% rownames_to_column("ID") %>% select(-income) %>% gather(var, value, -ID)
ggplot(tidydf, aes(value)) + geom_bar() + facet_wrap(~var, scales = "free") + theme_grey(8)
view(GSOEP9402)
df<-GSOEP9402
View(df)
View(tidydf)
sg <- sg %>% mutate(item = forcats::fct_relevel(item, ingredients))
ggplot(df, aes(`New Orleans`, Freq)) + geom_col(stat="identity") +
ggtitle("Neurologist Ratings") +
theme_grey(14)
df <- data.frame(as.table(MSPatients)) %>%
dplyr::select(`New Orleans` = New.Orleans.Neurologist,
Freq)
ggplot(df, aes(`New Orleans`, Freq)) + geom_col(stat="identity") +
ggtitle("Neurologist Ratings") +
theme_grey(14)
View(df)
runApp('Desktop/[ADS]Advanced Data Science/Fall2017-project2-grp2/app/NYC High School')
cov(2,3)
cov(2,c(2,34))
cov(c(1,2,3),c(2,34))
cov(c(1,2,3),c(2,34,9))
sigma<-matrix([1.25,-0.75,-0.75,1.25])
mu<-c(0,1)
mu<-c(0,1)
sigma<-matrix(c(1.25,-0.75,-0.75,1.25),2,2)
sigma
mu<-c(0,1)
sigma<-matrix(c(1.25,-0.75,-0.75,1.25),2,2)
x=(0,0)
cal_con<-function(mu,sigma,X,i){
neg_i=ifelse(i==1,2,1)
m=mu[i]+sigma[i,i]/sigma[neg_i,neg_i]*(X[neg_i]-mu[neg_i])
v=sigma[i,i]-sigma[neg_i,i]/(sigma[neg_i,neg_i])*sigma[neg_i,i]
}
cal_con<-function(mu,sigma,X,i){
neg_i=ifelse(i==1,2,1)
m=mu[i]+sigma[i,i]/sigma[neg_i,neg_i]*(X[neg_i]-mu[neg_i])
v=sigma[i,i]-sigma[neg_i,i]/(sigma[neg_i,neg_i])*sigma[neg_i,i]
return(c(m,v))
}
cal_con(mu,sigma,(0,0),1)
cal_con(mu,sigma,c(0,0),1)
cal_con(mu,sigma,c(0,0=9),1)
cal_con(mu,sigma,c(0,9),1)
df=data.frame()
df$x0=rep(NA,10000)
df<-data.frame()
df$x0=rep(NA,10000)
df<-data.frame(matrix(NA,10000,2))
for(i in 1:1000){
x0<-cal_con(mu,sigma,c(x0,x1),1)
x1<-cal_con(mu,sigma,c(x0,x1),2)
df[i,]=c(x0,x1)
}
x1=0
x0=0
df<-data.frame(matrix(NA,10000,2))
for(i in 1:1000){
x0<-cal_con(mu,sigma,c(x0,x1),1)
x1<-cal_con(mu,sigma,c(x0,x1),2)
df[i,]=c(x0,x1)
}
View(df)
cal_con<-function(mu,sigma,X,i){
neg_i=ifelse(i==1,2,1)
m=mu[i]+sigma[i,i]/sigma[neg_i,neg_i]*(X[neg_i]-mu[neg_i])
v=sigma[i,i]-sigma[neg_i,i]/(sigma[neg_i,neg_i])*sigma[neg_i,i]
return(rnorm(1,m,v))
}
cal_con(mu,sigma,c(0,9),1)
x1=0
x0=0
df<-data.frame(matrix(NA,10000,2))
for(i in 1:1000){
x0<-cal_con(mu,sigma,c(x0,x1),1)
x1<-cal_con(mu,sigma,c(x0,x1),2)
df[i,]=c(x0,x1)
}
colMeans(df)
for(i in 1:10000){
x0<-cal_con(mu,sigma,c(x0,x1),1)
x1<-cal_con(mu,sigma,c(x0,x1),2)
df[i,]=c(x0,x1)
}
colMeans(df)
cov(df)
return(rnorm(1,m,sqrt(v)))
cal_con<-function(mu,sigma,X,i){
neg_i=ifelse(i==1,2,1)
m=mu[i]+sigma[i,i]/sigma[neg_i,neg_i]*(X[neg_i]-mu[neg_i])
v=sigma[i,i]-sigma[neg_i,i]/(sigma[neg_i,neg_i])*sigma[neg_i,i]
return(rnorm(1,m,sqrt(v)))
}
cal_con(mu,sigma,c(0,9),1)
x1=0
x0=0
df<-data.frame(matrix(NA,10000,2))
for(i in 1:10000){
x0<-cal_con(mu,sigma,c(x0,x1),1)
x1<-cal_con(mu,sigma,c(x0,x1),2)
df[i,]=c(x0,x1)
}
cov(df)
colMeans(df)
cov(df)
cal_con<-function(mu,sigma,X,i){
neg_i=ifelse(i==1,2,1)
m=mu[i]+sigma[i,i]/sigma[neg_i,neg_i]*(X[neg_i]-mu[neg_i])
v=sigma[i,i]-sigma[neg_i,i]/(sigma[neg_i,neg_i])*sigma[neg_i,i]
return(rnorm(1,m,v))
}
x1=0
x0=0
df<-data.frame(matrix(NA,10000,2))
x0=1
df<-data.frame(matrix(NA,10000,2))
for(i in 1:10000){
x0<-cal_con(mu,sigma,c(x0,x1),1)
x1<-cal_con(mu,sigma,c(x0,x1),2)
df[i,]=c(x0,x1)
}
colMeans(df)
cov(df)
9.58+80+7+6+18+12+3.59+10.67+5+16.49+8.71+3.81+14.74+3.59+14.74+2.23+13+14.47+12.82+13.71+14.74+14.74+31.70+43.96+64.50+40+3+12.5+10.75+2.23+2.40+1.19+15+14+16.55+3.59
normalizePath()
library(tools)
file_path_as_absolute()
library(tools)
file_path_as_absolute("Compare_2_schools_SAT")
sys.frame(1)$ofile
sys.frames()
sys.frames()
sys.frames()$xofile
sys.frames()$ofile
dirname(sys.frame(1)$ofile)
dirname(sys.frame()$ofile)
dirname(sys.frame(1)$ofile)
dirname(sys.frame(1)$ofile)
source("Desktop/[ADS]Advanced Data Science/Fall2017-project2-grp2/doc/Compare_2_schools_SAT.R")
dirname(sys.frame(1)$ofile)
source("Desktop/[ADS]Advanced Data Science/Fall2017-project2-grp2/doc/Compare_2_schools_SAT.R")
source("Desktop/[ADS]Advanced Data Science/fall2017-project1-XinLuoCU/doc/Proj_1_xl2614_2.0.Rmd")
getSrcDirectory()
x<-source("Desktop/Statistical Graphic/Homeworks/HW1_xl2614.Rmd")
x<-source("Desktop/Statistical Graphic/Homeworks/HW1_xl2614")
x<-source("Desktop/[ADS]Advanced Data Science/Fall2017-project2-grp2/doc/PiePlot_4_Races.R")
trsplit(commandArgs(trailingOnly = FALSE)[4],"=")[[1]][2]
trsplit(commandArgs(trailingOnly = FALSE)[4],"=")[[1]][2]
strsplit(commandArgs(trailingOnly = FALSE)[4],"=")[[1]][2]
basename(strsplit(commandArgs(trailingOnly = FALSE)[4],"=")[[1]][2])
basename(strsplit(commandArgs(trailingOnly = FALSE)[4],"=")[[1]][2])
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("EBImage")
library("EBImage")
img <- readImage("chicken.jpg")
print(img)
img <- readImage("Desktop/Ruijie.png")
print(img)
img <- readImage("chicken.jpg")
img <- readImage("chicken.jpg")
print(img)
load("zipcode.RData")
dat[1:5, 1:5]
library("EBImage")
img <- readImage("chicken.jpg")
load("zipcode.RData")
dat[1:5, 1:5]
display(img)
text(x = 20, y = 20, label = "chicken", adj = c(0,1), col = "orange", cex = 2)
display(img)
text(x = 20, y = 20, label = "chicken", adj = c(0,1), col = "orange", cex = 2)
options("EBImage.display"= "raster")
View(dat)
n_r <- n_c <- 16
vec <- dat[70,]
M <- matrix(vec, n_r, n_c)
MM <- M[,rev(1:ncol(M))]
par(mfrow=c(1,2))
par(mfrow=c(1,2))
image(x=1:n_r, y=1:n_c, z=M, axes = FALSE, xlab="", ylab="", col = grey(seq(0, 1, length = 256)))
image(x=1:n_r, y=1:n_c, z=MM, axes = FALSE, xlab="", ylab="", col = grey(seq(0, 1, length = 256)))
par(mfrow=c(1,1))
img_zip <- Image(vec, dim=c(16, 16))
display(img_zip)
str(img)
dim(img)
imageData(img)[1:3, 1:6,]
hist(img)
img_small <- resize(img, 128, 128)
display(img_small)
img_dog <- readImage("dog.jpg")
img_dog <- resize(img_dog, 128, 128)
img_all <- EBImage::combine(img_small, img_dog)
display(img_all, all=TRUE)
img_all2 <- EBImage::combine(img_small, flip(img_small), flop(img_small))
display(img_all2, all=TRUE)
img_bright <- img + 0.2
img_bright <- img + 0.2
img_dark <- img - 0.2
display(combine(img_bright, img_dark), all=TRUE)
img_low <- img * 0.5
img_low <- img * 0.5
img_high <- img * 2
display(combine(img_low, img_high), all=TRUE)
w <- makeBrush(size = 31, shape = 'gaussian', sigma = 5)
plot(w[(nrow(w)+1)/2, ], ylab = "w", xlab = "", cex = 0.7)
img_flo <- filter2(img, w)
img_flo <- filter2(img, w)
display(img_flo)
display(img)
f_low <- makeBrush(21, shape='disc', step=FALSE)
display(f_low, title='Disc filter')
f_low <- f_low/sum(f_low)
img_lowPass <- filter2(img, filter=f_low)
img_lowPass <- filter2(img, filter=f_low)
f_low <- makeBrush(21, shape='disc', step=FALSE)
display(f_low, title='Disc filter')
f_low <- f_low/sum(f_low)
img_lowPass <- filter2(img, filter=f_low)
display(img_lowPass, title='Filtered image')
f_high <- matrix(1, nc=3, nr=3)
f_high[2,2] <- -8
img_highPass <- filter2(img, f_high)
display(img_highPass, title='Filtered image')
l = length(img)
n = l/10
pixels = sample(l, n)
img_noisy = img
img_noisy[pixels] = runif(n, min=0, max=0.5)
for(i in 1:6){}
for(i in 1:6){}
for(i in 1:6){
choose(i-1,5)*factorial(i-1)*5*factorial(10-i)/factorial(10)
}
for(i in 1:6){
print(choose(i-1,5)*factorial(i-1)*5*factorial(10-i)/factorial(10))}
i=3
choose(i-1,5)*factorial(i-1)*5*factorial(10-i)/factorial(10))
choose(i-1,5)*factorial(i-1)*5*factorial(10-i)/factorial(10)
choose(i-1,5)
choose(3-1,5)
choose(2,5)
choosen(2,5)
choose(5,i-1)*factorial(i-1)*5*factorial(10-i)/factorial(10)
for(i in 1:6){
print(choose(5,i-1)*factorial(i-1)*5*factorial(10-i)/factorial(10))}
5/18
5/36
5/48
5/84
5/252
1/252
173
17*3
17*6
for(i in 1:6){print(choose(10-i,4)/choose(10,5))}
93/208
library()
library('gbm')
install.packages('gbm')
5、78
5/78
load("~/Desktop/test_features.RData")
load("~/Desktop/test_set/test_features.RData")
load("~/Desktop/proj3-group9/test_features.RData")
load("~/Desktop/proj3-group9/test_features.RData")
setwd('~/Desktop/[ADS]Advanced Data Science/Fall2017-project3-fall2017-project3-grp9/')
img_labels<-read.csv("./data/training_set/label_train.csv")
colnames(img_labels)=c("Image","labels")
#img_labels[,2]<-ifelse(img_labels[,2]==2,1,0)
features<-read.csv("./data/training_set/sift_train.csv")
color<-read.csv("./data/color_features.csv",as.is = F)
orb<-read.csv("./data/orb_df_tidyver.csv",as.is = F)
lbp<-read.csv("./data/lbp_feature.csv",as.is = F)
gray<-read.csv("./data/gray_features.csv",as.is = F)[,-1]
features_sift_color<-cbind(features,color[,-1])
features_sift_color_orb<-cbind(features,color[,-1],orb[,-1])
features_sift_color_lbp<-cbind(features,color[,-1],lbp[,-1])
features_sift_color_lbp_gray<-cbind(features,color[,-1],lbp[,-1],gray[,-1])
set.seed(90)
train_index<-sample(1:3000,floor(nrow(img_labels)*0.75))
train_labels<-img_labels[train_index,2]
test_labels<-img_labels[-train_index,2]
train <- function(dat_train, label_train, par=NULL){
if(is.null(par)){
depth <- 3
} else {
depth <- par$depth
}
fit_gbm <- gbm.fit(x=dat_train, y=label_train,
n.trees=2000,
distribution="multinomial",
interaction.depth=depth,
bag.fraction = 0.5,
verbose=FALSE)
# best_iter <- gbm.perf(boost.fit, method="cv", cv.folds>1,plot.it = FALSE)
return(fit=list(fit_gbm))
}
img_names<-list.files("~/Desktop/test_set/images/")
Rbin<-seq(0,1,length.out =  10)
Gbin<-seq(0,1,length.out = 10)
Bbin<-seq(0,1,length.out = 10)
Hbin<-seq(0,1,length.out =  10)
Sbin<-seq(0,1,length.out = 10)
Vbin<-seq(0,0.005,length.out = 10)
rgb_features<-data.frame(matrix(NA,3000,1001))
colnames(rgb_features)<-c('Image',paste('rbg_',1:1000,sep=""))
rgb_features$Image<-img_names
hsv_features<-data.frame(matrix(NA,3000,1001))
colnames(hsv_features)<-c('Image',paste('hsv_',1:1000,sep=""))
hsv_features$Image<-img_names
Gbin<-seq(0,1,length.out =  250)
gray_features<-data.frame(matrix(NA,3000,251))
colnames(gray_features)<-c('Image',paste('gray_',1:250,sep=""))
for(i in 1:3000){
print(i)
img<-readImage(paste(img_dir,img_names[i],sep=""))
img<-resize(img,256,256)
if(length(dim(img))!=3){
# img_gray<-channel(img,"gray")
# img_mat_gray<-imageData(img_gray)
# freq_gray <- as.data.frame(table(factor(findInterval(img_mat_gray, Gbin), levels = 1:250)))
# gray_features[i,2:251] <- as.numeric(freq_gray$Freq)/(ncol(img_mat_gray)*nrow(img_mat_gray))
next
}
#img<-resize(img,256,256)
img_mat<-imageData(img)
### RGB
rgb_mat<-img_mat
rgb_df=as.data.frame(table(factor(findInterval(rgb_mat[,,1],Rbin),levels = 1:10),
factor(findInterval(rgb_mat[,,2],Gbin),levels = 1:10),
factor(findInterval(rgb_mat[,,3],Bbin),levels = 1:10)))
rgb_features[i,2:1001]<-rgb_df$Freq/(256^2)
### HSV
dim(img_mat)<-c(256*256,3)
hsv_mat<-rgb2hsv(t(img_mat))
hsv_df=as.data.frame(table(factor(findInterval(hsv_mat[1,],Hbin),levels = 1:10),
factor(findInterval(hsv_mat[2,],Sbin),levels = 1:10),
factor(findInterval(hsv_mat[3,],Vbin),levels = 1:10)))
hsv_features[i,2:1001]<-hsv_df$Freq/(256^2)
### Gray
img_gray<-channel(img,"gray")
#img<-resize(img,256,256)
img_mat_gray<-imageData(img_gray)
freq_gray <- as.data.frame(table(factor(findInterval(img_mat_gray, Gbin), levels = 1:250)))
gray_features[i,2:251] <- as.numeric(freq_gray$Freq)/(ncol(img_mat_gray)*nrow(img_mat_gray))
}
library("EBImage")
for(i in 1:3000){
print(i)
img<-readImage(paste(img_dir,img_names[i],sep=""))
img<-resize(img,256,256)
if(length(dim(img))!=3){
# img_gray<-channel(img,"gray")
# img_mat_gray<-imageData(img_gray)
# freq_gray <- as.data.frame(table(factor(findInterval(img_mat_gray, Gbin), levels = 1:250)))
# gray_features[i,2:251] <- as.numeric(freq_gray$Freq)/(ncol(img_mat_gray)*nrow(img_mat_gray))
next
}
#img<-resize(img,256,256)
img_mat<-imageData(img)
### RGB
rgb_mat<-img_mat
rgb_df=as.data.frame(table(factor(findInterval(rgb_mat[,,1],Rbin),levels = 1:10),
factor(findInterval(rgb_mat[,,2],Gbin),levels = 1:10),
factor(findInterval(rgb_mat[,,3],Bbin),levels = 1:10)))
rgb_features[i,2:1001]<-rgb_df$Freq/(256^2)
### HSV
dim(img_mat)<-c(256*256,3)
hsv_mat<-rgb2hsv(t(img_mat))
hsv_df=as.data.frame(table(factor(findInterval(hsv_mat[1,],Hbin),levels = 1:10),
factor(findInterval(hsv_mat[2,],Sbin),levels = 1:10),
factor(findInterval(hsv_mat[3,],Vbin),levels = 1:10)))
hsv_features[i,2:1001]<-hsv_df$Freq/(256^2)
### Gray
img_gray<-channel(img,"gray")
#img<-resize(img,256,256)
img_mat_gray<-imageData(img_gray)
freq_gray <- as.data.frame(table(factor(findInterval(img_mat_gray, Gbin), levels = 1:250)))
gray_features[i,2:251] <- as.numeric(freq_gray$Freq)/(ncol(img_mat_gray)*nrow(img_mat_gray))
}
for(i in 1:3000){
print(i)
img<-readImage(paste("~/Desktop/test_set/images/",img_names[i],sep=""))
img<-resize(img,256,256)
if(length(dim(img))!=3){
# img_gray<-channel(img,"gray")
# img_mat_gray<-imageData(img_gray)
# freq_gray <- as.data.frame(table(factor(findInterval(img_mat_gray, Gbin), levels = 1:250)))
# gray_features[i,2:251] <- as.numeric(freq_gray$Freq)/(ncol(img_mat_gray)*nrow(img_mat_gray))
next
}
#img<-resize(img,256,256)
img_mat<-imageData(img)
### RGB
rgb_mat<-img_mat
rgb_df=as.data.frame(table(factor(findInterval(rgb_mat[,,1],Rbin),levels = 1:10),
factor(findInterval(rgb_mat[,,2],Gbin),levels = 1:10),
factor(findInterval(rgb_mat[,,3],Bbin),levels = 1:10)))
rgb_features[i,2:1001]<-rgb_df$Freq/(256^2)
### HSV
dim(img_mat)<-c(256*256,3)
hsv_mat<-rgb2hsv(t(img_mat))
hsv_df=as.data.frame(table(factor(findInterval(hsv_mat[1,],Hbin),levels = 1:10),
factor(findInterval(hsv_mat[2,],Sbin),levels = 1:10),
factor(findInterval(hsv_mat[3,],Vbin),levels = 1:10)))
hsv_features[i,2:1001]<-hsv_df$Freq/(256^2)
### Gray
img_gray<-channel(img,"gray")
#img<-resize(img,256,256)
img_mat_gray<-imageData(img_gray)
freq_gray <- as.data.frame(table(factor(findInterval(img_mat_gray, Gbin), levels = 1:250)))
gray_features[i,2:251] <- as.numeric(freq_gray$Freq)/(ncol(img_mat_gray)*nrow(img_mat_gray))
}
color_features<-merge(rgb_features,hsv_features,by.x = "Image",by.y="Image")
sift_features<-read.csv("./data/test_set/sift_train.csv")
sift_features<-read.csv("../data/test_set/sift_train.csv")
sift_features<-read.csv("~/Desktop/[ADS]Advanced Data Science/Fall2017-project3-fall2017-project3-grp9//data/test_set/sift_train.csv")
sift_features<-read.csv("~/Desktop/[ADS]Advanced Data Science/Fall2017-project3-fall2017-project3-grp9/data/training_set//sift_train.csv")
lbp_features<-read.csv("~/Desktop/[ADS]Advanced Data Science/Fall2017-project3-fall2017-project3-grp9/data/lbp_feature.csv")
features_sift_color_lbp<-cbind(sift_features,color_features[,-1],lbp_features[,-1])
sift_features<-read.csv("~/Desktop/test_set/sift_test.csv")
lbp_features<-read.csv("~/Desktop/lbp_train.csv")
features_sift_color_lbp<-cbind(sift_features,color_features[,-1],lbp_features[,-1])
lbp_features<-read.csv("~/Desktop/lbp_train.csv",header=F)
features_sift_color_lbp<-cbind(sift_features,color_features[,-1],lbp_features[,-1])
features_sift_color_lbp_gray<-cbind(sift_features,color_features[,-1],lbp_features[,-1],gray_features)
colnames(lbp_features)
colnames(lbp_features)<-paste("lbp_",1:26,sep="")
features_sift_color_lbp<-cbind(sift_features,color_features[,-1],lbp_features[,-1])
features_sift_color_lbp_gray<-cbind(sift_features,color_features[,-1],lbp_features[,-1],gray_features)
load("~/Desktop/[ADS]Advanced Data Science/Fall2017-project3-fall2017-project3-grp9/output/fit_train_90.RData")
p_ada90<-predict.boosting(fit_train_ada,features_sift_color_lbp_gray[,-1])
library("adabag")
p_ada90<-predict.boosting(fit_train_ada,features_sift_color_lbp_gray[,-1])
colnames(lbp_features)<-paste("lbp_",1:26,sep="")
features_sift_color_lbp<-cbind(sift_features,color_features[,-1],lbp_features)
features_sift_color_lbp_gray<-cbind(sift_features,color_features[,-1],lbp_features,gray_features)
p_ada90<-predict.boosting(fit_train_ada,features_sift_color_lbp_gray[,-1])
start=Sys.time()
p_ada90<-predict.boosting(fit_train_ada,features_sift_color_lbp_gray[,-1])
end=Sys.time()
View(gray_features)
p_ada<-as.integer(p_ada90$class)
table(p_ada)
setwd('~/Desktop/[ADS]Advanced Data Science/Fall2017-project3-fall2017-project3-grp9/')
img_labels<-read.csv("./data/training_set/label_train.csv")
colnames(img_labels)=c("Image","labels")
#img_labels[,2]<-ifelse(img_labels[,2]==2,1,0)
features<-read.csv("./data/training_set/sift_train.csv")
color<-read.csv("./data/color_features.csv",as.is = F)
orb<-read.csv("./data/orb_df_tidyver.csv",as.is = F)
lbp<-read.csv("./data/lbp_feature.csv",as.is = F)
gray<-read.csv("./data/gray_features.csv",as.is = F)[,-1]
features_sift_color<-cbind(features,color[,-1])
features_sift_color_orb<-cbind(features,color[,-1],orb[,-1])
features_sift_color_lbp<-cbind(features,color[,-1],lbp[,-1])
features_sift_color_lbp_gray<-cbind(features,color[,-1],lbp[,-1],gray[,-1])
set.seed(90)
train_index<-sample(1:3000,floor(nrow(img_labels)*0.75))
train_data<-features_sift_color_lbp_gray[train_index,]
train_data$labels<-as.factor(train_labels)
test_data<-features_sift_color_lbp_gray[-train_index,]
train_labels<-img_labels[train_index,2]
test_labels<-img_labels[-train_index,2]
p_ada90<-predict.boosting(fit_train_ada,test_data[,-1])
